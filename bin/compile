#!/usr/bin/env bash

# Fail fast and fail hard.
set -eo pipefail

# Paths.
BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
CACHED_DIRS=".heroku"
WORKING_DIR=$(pwd)

rm -fr $CACHE_DIR
mkdir -p $CACHE_DIR

# Versions.
# cedar-14 now has python!
# PYTHON_VERSION="python-2.7.4"
# DISTRIBUTE_VERSION="distribute-0.6.49"
# PIP_VERSION="pip-1.3.1"
NGINX_VERSION="nginx-1.6.0"
PCRE_VERSION='pcre-8.35'
source $BIN_DIR/utils

# Export env variables while building. Must do this as user-env-compile was deprecated.
if [ -d "$ENV_DIR" ]; then
  for e in $(ls $ENV_DIR); do
    export "$e=$(cat $ENV_DIR/$e)"
  done
fi

puts-step "Building pelican site $PELICAN_SITEURL"

mkdir -p $BUILD_DIR/local/sbin

# if [[ ! -d "$CACHE_DIR/$PYTHON_VERSION" ]]; then
#   cd $CACHE_DIR
#   puts-step "Installing Python ($PYTHON_VERSION)"
#   curl http://envy-versions.s3.amazonaws.com/$PYTHON_VERSION.tar.bz2 -s | tar jx &> /dev/null
#   mv python $PYTHON_VERSION
# fi

# export PATH=$CACHE_DIR/$PYTHON_VERSION/bin:$PATH

# if [[ ! -d "$CACHE_DIR/$DISTRIBUTE_VERSION" ]]; then
#   cd $CACHE_DIR
#   puts-step "Installing Distribute ($DISTRIBUTE_VERSION)"
#   curl https://pypi.python.org/packages/source/d/distribute/$DISTRIBUTE_VERSION.tar.gz -s | tar xz &> /dev/null
#   cd $DISTRIBUTE_VERSION
#   python setup.py install &> /dev/null
# fi

# if [[ ! -d "$CACHE_DIR/$PIP_VERSION" ]]; then
#   cd $CACHE_DIR
#   puts-step "Install pip ($PIP_VERSION)"
#   curl https://pypi.python.org/packages/source/p/pip/$PIP_VERSION.tar.gz -s | tar xz &> /dev/null
#   cd $PIP_VERSION
#   python setup.py install &> /dev/null
# fi

puts-step "Install pip"

ls -la .
ls -la $ROOT_DIR
echo $CACHE_DIR
ls -la $CACHE_DIR
echo $BUILD_DIR
ls -la $BUILD_DIR

python $BIN_DIR/get-pip.py --user

ls -la .
ls -la $ROOT_DIR
echo $CACHE_DIR
ls -la $CACHE_DIR
echo $BUILD_DIR
ls -la $BUILD_DIR
echo $WORKING_DIR
ls -la $WORKING_DIR

cd $BUILD_DIR

export PATH=$WORKING_DIR/.local/bin:$PATH

if [[ -f requirements.txt ]]; then
  puts-step "Installing dependencies using pip"
  pip install --user --no-cache-dir -r requirements.txt | indent
else
  puts-step "Installing Pelican"
  pip install pelican | indent

  puts-step "Installing Markdown"
  pip install Markdown | indent
fi

# install sass
puts-step "Installing Sass"
export GEM_HOME=$BUILD_DIR/.gem/ruby/2.2.0
export PATH="$GEM_HOME/bin:$BUILD_DIR/.gem/ruby/1.9.1/bin:$BUILD_DIR/.gem/ruby/2.2.0/bin:$PATH"
if test -d $CACHE_DIR/ruby/.gem; then
  cp -r $CACHE_DIR/ruby/.gem $BUILD_DIR
  HOME=$BUILD_DIR gem update sass --user-install --no-rdoc --no-ri
else
  HOME=$BUILD_DIR gem install sass --user-install --no-rdoc --no-ri
fi

# cache ruby gems sass
rm -rf $CACHE_DIR/ruby
mkdir -p $CACHE_DIR/ruby

puts-step "Running pelican"

if [[ -f publishconf.py ]]; then
  CONFIG_FILE="publishconf.py"
elif [[ -f pelicanconf.py ]]; then
  CONFIG_FILE="pelicanconf.py"
else
  puts-warn "A pelicanconf.py or publishconf.py file is required."
  exit 1
fi

ls -la
ls -la $BUILD_DIR

pelican -D -d -o $BUILD_DIR/public -s $CONFIG_FILE $BUILD_DIR/content | indent

puts-step "Installing pcre ($PCRE_VERSION)"
if [[ ! -d "$CACHE_DIR/$PCRE_VERSION" ]]; then
  cd $CACHE_DIR
  curl -L http://downloads.sourceforge.net/pcre/$PCRE_VERSION.tar.bz2 -s | tar jx &> /dev/null
fi

puts-step "Installing nginx ($NGINX_VERSION)"
if [[ ! -d "$CACHE_DIR/$NGINX_VERSION" ]]; then
  cd $CACHE_DIR
  curl http://nginx.org/download/$NGINX_VERSION.tar.gz -s | tar xz &> /dev/null
  cd $NGINX_VERSION
  ./configure --prefix=$BUILD_DIR/local \
    --with-pcre=$CACHE_DIR/$PCRE_VERSION \
    --without-select_module \
    --without-poll_module \
    --without-http_gzip_module \
    --without-http_proxy_module \
    --with-http_gzip_static_module &> /dev/null
  make -j2 &> /dev/null
fi

cd $CACHE_DIR/$NGINX_VERSION
make install &> /dev/null

mkdir -p $BUILD_DIR/.profile.d
cp $ROOT_DIR/conf/path.sh $BUILD_DIR/.profile.d/

if [[ ! -f $BUILD_DIR/nginx.conf.erb ]]; then
  cp $ROOT_DIR/conf/nginx.conf.erb $BUILD_DIR/nginx.conf.erb
fi

cp $ROOT_DIR/conf/mime.types $BUILD_DIR/
cp $BIN_DIR/launch-nginx "$BUILD_DIR/local/sbin"
